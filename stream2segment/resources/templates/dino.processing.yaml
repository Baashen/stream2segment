# This is the list of key (attributes) and values used for the segment_select property. Scroll down
# at the end of the table for info on how to use them
# 
# ========================================= ================================================
# attribute                                 python type
# ========================================= ================================================
# segment.id                                int
# segment.event_distance_deg                float (segment station to event distance, in degrees)
# segment.start_time                        datetime.datetime
# segment.arrival_time                      datetime.datetime
# segment.end_time                          datetime.datetime
# segment.sample_rate                       float (as written in the segment bytes data,
# \                                         might differ from segment.channel.sample_rate)
# segment.download_status_code              int (typically, values between 200 and 399 denote
# \                                         ok download. Values >=400 or lower than zero denote
# \                                         errors)
# segment.max_gap_overlap_ratio             float (max gap or - if < 0 - overlap, in
# \                                         sampling_period unit = `segment.stream().stats.delta`.
# \                                         Thus values >=1 denote segment waveforms with missing
# \                                         samples, values <=1 denote segment waveforms with
# \                                         overlapping samples. A good rule of thumb is to consider
# \                                         a segment without gaps /overlaps when this value is
# \                                         within the interval [-0.5, 0.5])
# segment.seed_identifier                   str (when None, string in the typical
# \                                         Network.Station.Location.Channel format)
# segment.data                              bytes (you don't generally need to access this
# \                                         attribute which is also time-comsuming to fetch. It is
# \                                         the raw data for building `stream()`)
# ----------------------------------------- ------------------------------------------------
# segment.event                             object (attributes below)
# segment.event.id                          str
# segment.event.time                        datetime.datetime
# segment.event.latitude                    float
# segment.event.longitude                   float
# segment.event.depth_km                    float
# segment.event.author                      str
# segment.event.catalog                     str
# segment.event.contributor                 str
# segment.event.contributor_id              str
# segment.event.mag_type                    str
# segment.event.magnitude                   float
# segment.event.mag_author                  str
# segment.event.event_location_name         str
# ----------------------------------------- ------------------------------------------------
# segment.channel                           object (attributes below)
# segment.channel.id                        str
# segment.channel.location                  str
# segment.channel.channel                   str
# segment.channel.depth                     float
# segment.channel.azimuth                   float
# segment.channel.dip                       float
# segment.channel.sensor_description        str
# segment.channel.scale                     float
# segment.channel.scale_freq                float
# segment.channel.scale_units               str
# segment.channel.sample_rate               float
# segment.channel.station                   object (same as segment.station, see below)
# ----------------------------------------- ------------------------------------------------
# segment.station                           object (attributes below)
# segment.station.id                        str
# segment.station.network                   str
# segment.station.station                   str
# segment.station.latitude                  float
# segment.station.longitude                 float
# segment.station.elevation                 float
# segment.station.site_name                 str
# segment.station.start_time                datetime.datetime
# segment.station.end_time                  datetime.datetime
# segment.station.inventory_xml             bytes* (you don't generally need to access this
# \                                         attribute which is also time-comsuming to fetch. It is
# \                                         the raw data for building `inventory()`)
# segment.station.datacenter                object (same as segment.datacenter, see below)
# ----------------------------------------- ------------------------------------------------
# segment.datacenter                        object (attributes below)
# segment.datacenter.id                     int
# segment.datacenter.station_url            str
# segment.datacenter.dataselect_url         str
# segment.datacenter.node_organization_name str
# ----------------------------------------- ------------------------------------------------
# segment.run                               object (attributes below): 'Run' represents a
# \                                         download execution (download run)
# segment.run.id                            int
# segment.run.run_time                      datetime.datetime
# segment.run.log                           str  (you don't generally need to access this
# \                                         attribute which is also time-comsuming to fetch. It is
# \                                         the log text written during download, useful for
# \                                         inspecting the download result in details)
# segment.run.warnings                      int
# segment.run.errors                        int
# segment.run.config                        str
# segment.run.program_version               str
#     
# classes                                   str either 'any' (segment which have at least one
# \                                         class assigned) or 'none' (segments with no class assigned)
# classes.id                                int
# ========================================= ================================================
#    
# (the last two properties are available only if class labels are given, see below)

# Here you can select which segments to work on, discarding non-matching segments.
# For a given key, type a select condition given in any of the following string expressions:
# 1. A list of space-separated values: select segment matching those values only (sql 'in' operator)
# 2. A value preceeded by any of the symbols: = >= > < <= !=
# 3. A tuple or list (same syntax as python) of two values: select segments whose value is in between (sql 'between' operator)
#    Note that tuples (opening and closing round brackets) denote the open interval (no endpoint included), whereas
#    lists  (opening and closing square brackets) denote the closed interval (endpoints included). You can mix them, e,g: (4,5]
#
# Example: to select and work on segments whose id is in a specified list of
# ids (e.g., 1 4 5 67 89 342), with downloaded waveform data
# (non empty data), whose event magnitude is in [4.5, 5.56] (endpoints included), whose station start_time is not greater
# than 1st january 2016, and whose channel sensor description is 'GURALP CMG-40T-30S'
#
# segment_select:
#   has_data: true
#   id: "1 4 5 67 89 342"
#   event.latitude: "[4.5, 5.6]"
#   station.start_time: "<= 2016-01-01T00:00:00"
#   channel.sensor_description: "'GURALP CMG-40T-30S'"
segment_select:
  has_data: 'true'
# id: '<300'
  max_gap_overlap_ratio: '(-0.5, 0.5)'
  event.time: "(2014-01-01T00:00:00, 2014-12-31T23:59:59)"
  event.latitude: "[24, 70]"
  event.longitude: "[-11, 24]"


# set to True or False if station inventories should be saved when they need to be downloaded
# If missing (e.g., by deleting the line below), it defaults to False.
# Saving inventories might speed up further processing but increases db size
save_inventory: False


# Define the windows for the sn-spectra (signal-noise spectra)
#
# Arrival time shift: shifts programmatically the calculated arrival time of
# each segment by the specified amount of time (in seconds). Negative values are allowed.
# The arrival time sets the end of the noise window, whose
# length (duration) is always set equal to the signal window (see below)
#
# Signal window: specifies the signal window. It can be a number, specifying the
# window duration, in seconds starting from the arrival time, or a 2-element array
# specifying the window time start and end, relative to the cumulative. A value of [0.05, 0.95] for
# instance sets the signal window from the time the cumulative reaches 5% of its maximum, until
# the time it reaches 95% of its maximum. Note that in this case the noise window and the
# signal window might overlap.
sn_windows:
  arrival_time_shift: -2.0  # programmatically shifts the arrival time for every segment (in seconds). Tune if you find arrival times should be corrected after visual inspection
  signal_window: [0.1, 0.9]  # either a number (in seconds) or interval relative to the % of the cumulative

# settings for the current implementation of the sn (signal-to-noise) spectra (see processing python file).
# Remove / modify if you do not use / implement a different sn_spectra function
sn_spectra:
  taper:
    max_percentage: 0.05
    type: 'hann'
  smoothing_wlen_ratio: 0.05  # 0 for no smoothing
  type: 'amp'  # if 'pow', then power spectra are computed, otherwise any other value defaults to amplitude spectra
  
# settings for the current implementation of the pre-process function (see processing python file).
# Remove / modify if you do not use / implement a different pre-process function 
preprocess:
  remove_response_water_level: 60
  remove_response_output: 'ACC'
  bandpass_freq_max: 30  # the max frequency, in Hz:
  bandpass_max_nyquist_ratio: 0.9
  bandpass_corners: 2

paz_wa:
  sensitivity: 2800
  zeros:
    - '0j'
  poles:
    - '-6.2832-4.7124j'
    - '-6.2832+4.7124j'
  gain: 1

###############################################################################
# Classes (label: description) for manual annotation in case of supervised classification problem
# The labels below will first be added to the db and then will show up in the GUI where one or
# more classes can be assigned to a given segment
# this parameter is optional, if missing no class labels will show in the GUI, unless already
# set by a previous config
# we leave here below an example of it: uncomment the block from ''class_labels' on, 
# and provide your own labels if needed 
###############################################################################
#class_labels:
#  Discarded: "Segment which does not fall in any other cathegory (e.g., unknown artifacts, bad formats etcetera)"
#  Unknown: "Segment which is either: unlabeled (not annotated) or unclassified"
#  Ok: "Segment with no artifact"
#  LowS2N: "Segment has a low signal-to-noise ratio"
#  Aftershock: "Segment with non overlapping multi-events recorded (aftershock)"
#  MultiEvent: "Segment with overlapping multi-events recorded (no aftershock)"
#  BadCoda: "Segment with a bad coda (bad decay)"


# custom parameters:
amp_ratio_threshold: 0.8
threshold_inside_tmin_tmax_percent: 0.90
threshold_inside_tmin_tmax_sec: 10.0
threshold_after_tmax_percent: 0.10
# the window length (in seconds). There will be two spectra, one calculated on
# AT-window_length (noisy signal), the other on AT+window_length ('normal' signal):
snr_threshold: 3
freqs_interp:
 - 0.1
 - 0.106365
 - 0.113136
 - 0.120337
 - 0.127997
 - 0.136145
 - 0.144811
 - 0.154028
 - 0.163833
 - 0.174261
 - 0.185354
 - 0.197152
 - 0.209701
 - 0.22305
 - 0.237248
 - 0.252349
 - 0.268412
 - 0.285497
 - 0.30367
 - 0.323
 - 0.34356
 - 0.365429
 - 0.388689
 - 0.413431
 - 0.439747
 - 0.467739
 - 0.497512
 - 0.52918
 - 0.562864
 - 0.598692
 - 0.636801
 - 0.677336
 - 0.72045
 - 0.766309
 - 0.815088
 - 0.866971
 - 0.922156
 - 0.980855
 - 1.04329
 - 1.1097
 - 1.18033
 - 1.25547
 - 1.33538
 - 1.42038
 - 1.5108
 - 1.60696
 - 1.70925
 - 1.81805
 - 1.93378
 - 2.05687
 - 2.18779
 - 2.32705
 - 2.47518
 - 2.63273
 - 2.80031
 - 2.97856
 - 3.16816
 - 3.36982
 - 3.58432
 - 3.81248
 - 4.05516
 - 4.31328
 - 4.58784
 - 4.87987
 - 5.19049
 - 5.52088
 - 5.8723
 - 6.24609
 - 6.64368
 - 7.06657
 - 7.51638
 - 7.99483
 - 8.50372
 - 9.04501
 - 9.62076
 - 10.2332
 - 10.8845
 - 11.5774
 - 12.3143
 - 13.0982
 - 13.9319
 - 14.8187
 - 15.762
 - 16.7653
 - 17.8324
 - 18.9675
 - 20.1749
 - 21.4591
 - 22.825
 - 24.2779
 - 25.8233
 - 27.467
 - 29.2154
 - 31.075
 - 33.0531
 - 35.157
 - 37.3949
 - 39.7752
 - 42.307
 - 45.
