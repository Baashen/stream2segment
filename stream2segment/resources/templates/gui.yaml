# This is the list of key and values used for the segment_select property. Scroll down
# at the end of the table for info on how to use them
# 
# ----------------------------------------------------
# Key                               Type
# =================================  =================
#    has_data                        bool
#    id                              int
#    event_distance_deg              float
#    start_time                      datetime.datetime
#    arrival_time                    datetime.datetime
#    end_time                        datetime.datetime
#
#    event.id                        str
#    event.time                      datetime.datetime
#    event.latitude                  float
#    event.longitude                 float
#    event.depth_km                  float
#    event.author                    str
#    event.catalog                   str
#    event.contributor               str
#    event.contributor_id            str
#    event.mag_type                  str
#    event.magnitude                 float
#    event.mag_author                str
#    event.event_location_name       str
#    
#    channel.id                      str
#    channel.location                str
#    channel.channel                 str
#    channel.depth                   float
#    channel.azimuth                 float
#    channel.dip                     float
#    channel.sensor_description      str
#    channel.scale                   float
#    channel.scale_freq              float
#    channel.scale_units             str
#    channel.sample_rate             float
#    
#    station.id                      str
#    station.network                 str
#    station.station                 str
#    station.latitude                float
#    station.longitude               float
#    station.elevation               float
#    station.site_name               str
#    station.start_time              datetime.datetime
#    station.end_time                datetime.datetime
#    station.has_inventory           bool
#    
#    datacenter.id                   int
#    datacenter.station_query_url    str
#    datacenter.dataselect_query_url str
#    
#    run.id                          int
#    run.run_time                    datetime.datetime
#    run.program_version             str
#
#    (run refers to the download run of the segment)
#    
#    classes                         str either 'any' (segment which have at least one class assigned) or 'none' (segments with no class assigned)
#    classes.id                      int
#    
#    (these last two properties are available only if class labels are given)
# =================================  =================

# Here you can select which segments to work on, discarding non-matching segments.
# For a given key, type a select condition given in any of the following string expressions:
# 1. A list of space-separated values: select segment matching those values only (sql 'in' operator)
# 2. A value preceeded by any of the symbols: = >= > < <= !=
# 3. A tuple or list (same syntax as python) of two values: select segments whose value is in between (sql 'between' operator)
#    Note that tuples (opening and closing round brackets) denote the open interval (no endpoint included), whereas
#    lists  (opening and closing square brackets) denote the closed interval (endpoints included). You can mix them, e,g: (4,5]
#
# Example: to select and work on segments whose id is in a specified list of
# ids (e.g., 1 4 5 67 89 342), with downloaded waveform data
# (non empty data), whose event magnitude is in [4.5, 5.56] (endpoints included), whose station start_time is not greater
# than 1st january 2016, and whose channel sensor description is 'GURALP CMG-40T-30S'
#
# segment_select:
#   has_data: true
#   id: "1 4 5 67 89 342"
#   event.latitude: "[4.5, 5.6]"
#   station.start_time: "<= 2016-01-01T00:00:00"
#   channel.sensor_description: "'GURALP CMG-40T-30S'"
segment_select:
  has_data: "true"  # remember to quote (either with " or '): expressions needs to be string (from the GUI, quotes are not needed)
                    # Note that string values with spaces needs to be quoted twice. In the example above "'GURALP CMG-40T-30S'"
                    # matches 'GURALP CMG-40T-30S',
                    # whereas "GURALP CMG-40T-30S" matches "GURALP" or "CMG-40T-30S" but not the whole string. This is needed only with
                    # STRING VALUES WITH spaces. In any other case, provide only quotes around the whole expression
                      
# order segments by: specify a list of attributes as for segment_select, except 'classes' and 'classes.id'
# which are not supported here. Additionally, you can append a + or - to specify order ascending (the default when
# missing) or descending
segment_orderby:
  - event.time-  # this will sort segment according to the event time, descending (- at end)
  - event_distance_deg  # for segments with the given event.time, this will sort them ascending (no symbol defaults to +: ascending)

# set to True or False if station inventories should be passed in the processing function
# If you don't need inventories (usually useful for removing the instrumental response from the Stream object)
# set to False, as this will speed up the processing loop
# If missing (e.g., by deleting the line below), it defaults to False
inventory: True

# set to True or False if station inventories should be saved when they need to be downloaded
# If missing (e.g., by deleting the line below), it defaults to False. This parameter has effect only if inventory above is True
# Saving inventories might speed up further processing but increases db size
save_inventory: False

# Define the windows for the sn-spectra (signal-noise spectra)
#
# Arrival time shift: shifts programmatically the calculated arrival time of
# each segment by the specified amount of time (in seconds). Negative values are allowed.
# The arrival time sets the end of the noise window, whose
# length (duration) is always set equal to the signal window (see below)
#
# Signal window: specifies the signal window. It can be a number, specifying the
# window duration, in seconds starting from the arrival time, or a 2-element array
# specifying the window time start and end, relative to the cumulative. A value of [0.05, 0.95] for
# instance sets the signal window from the time the cumulative reaches 5% of its maximum, until
# the time it reaches 95% of its maximum. Note that in this case the noise window and the
# signal window might overlap.
sn_windows:
  arrival_time_shift: 0  # programmatically shifts the arrival time for every segment (in seconds). Tune if you find arrival times should be corrected after visual inspection
  signal_window: [0.1, 0.9]  # either a number (in seconds) or interval relative to the % of the cumulative

# settings for sn (signal-to-noise) spectra
sn_spectra:
  taper:
    max_percentage: 0.05
    type: 'hann'
  smoothing_wlen_ratio: 0.05  # 0 for no smoothing
  type: 'amp'  # if 'pow', then power spectra are computed, otherwise any other value defaults to amplitude spectra

###############################################################################
# Classes (label: description) for manual annotation in case of supervised classification problem
# The labels below will first be added to the db and then will show up in the GUI where one or
# more classes can be assigned to a given segment
# this parameter is optional, if missing no class labels will show in the GUI, unless already
# set by a previous config
# we leave here below an example of it: uncomment the block from ''class_labels' on, 
# and provide your own labels if needed 
###############################################################################
#class_labels:
#  Discarded: "Segment which does not fall in any other cathegory (e.g., unknown artifacts, bad formats etcetera)"
#  Unknown: "Segment which is either: unlabeled (not annotated) or unclassified"
#  Ok: "Segment with no artifact"
#  LowS2N: "Segment has a low signal-to-noise ratio"
#  Aftershock: "Segment with non overlapping multi-events recorded (aftershock)"
#  MultiEvent: "Segment with overlapping multi-events recorded (no aftershock)"
#  BadCoda: "Segment with a bad coda (bad decay)"

# custom paremeters below. You can change / delete their values but you should also
# re-implement the spectra function defined in the python file:
filter_settings:
  remove_response_water_level: 60
  remove_response_output: 'ACC'
  bandpass_freq_max: 20  # the max frequency, in Hz:
  bandpass_max_nyquist_ratio: 0.9
  bandpass_corners: 2