# This is the list of key and values used for the segment_select property. Scroll down
# at the end of the table for info on how to use them
# 
# ----------------------------------------------------
# Key                               Type
# =================================  =================
#    has_data                        bool
#    id                              int
#    event_distance_deg              float
#    start_time                      datetime.datetime
#    arrival_time                    datetime.datetime
#    end_time                        datetime.datetime
#
#    event.id                        str
#    event.time                      datetime.datetime
#    event.latitude                  float
#    event.longitude                 float
#    event.depth_km                  float
#    event.author                    str
#    event.catalog                   str
#    event.contributor               str
#    event.contributor_id            str
#    event.mag_type                  str
#    event.magnitude                 float
#    event.mag_author                str
#    event.event_location_name       str
#    
#    channel.id                      str
#    channel.location                str
#    channel.channel                 str
#    channel.depth                   float
#    channel.azimuth                 float
#    channel.dip                     float
#    channel.sensor_description      str
#    channel.scale                   float
#    channel.scale_freq              float
#    channel.scale_units             str
#    channel.sample_rate             float
#    
#    station.id                      str
#    station.network                 str
#    station.station                 str
#    station.latitude                float
#    station.longitude               float
#    station.elevation               float
#    station.site_name               str
#    station.start_time              datetime.datetime
#    station.end_time                datetime.datetime
#    station.has_inventory           bool
#    
#    datacenter.id                   int
#    datacenter.station_query_url    str
#    datacenter.dataselect_query_url str
#    
#    run.id                          int
#    run.run_time                    datetime.datetime
#    run.program_version             str
#
#    (run refers to the download run of the segment)
#    
#    classes                         str either 'any' (segment which have at least one class assigned) or 'none' (segments with no class assigned)
#    classes.id                      int
#    
#    (these last two properties are available only if class labels are given)
# =================================  =================

# Here you can select which segments to work on, discarding non-matching segments.
# For a given key, type a select condition given in any of the following string expressions:
# 1. A list of space-separated values: select segment matching those values only (sql 'in' operator)
# 2. A value preceeded by any of the symbols: = >= > < <= !=
# 3. A tuple or list (same syntax as python) of two values: select segments whose value is in between (sql 'between' operator)
#    Note that tuples (opening and closing round brackets) denote the open interval (no endpoint included), whereas
#    lists  (opening and closing square brackets) denote the closed interval (endpoints included). You can mix them, e,g: (4,5]
#
# Example: to select and work on segments whose id is in a specified list of
# ids (e.g., 1 4 5 67 89 342), with downloaded waveform data
# (non empty data), whose event magnitude is in [4.5, 5.56] (endpoints included), whose station start_time is not greater
# than 1st january 2016, and whose channel sensor description is 'GURALP CMG-40T-30S'
#
# segment_select:
#   has_data: true
#   id: "1 4 5 67 89 342"
#   event.latitude: "[4.5, 5.6]"
#   station.start_time: "<= 2016-01-01T00:00:00"
#   channel.sensor_description: "'GURALP CMG-40T-30S'"
segment_select:
  has_data: "true"  # remember to quote (either with " or '): expressions needs to be string (from the GUI, quotes are not needed)
                    # Note that string values with spaces needs to be quoted twice. In the example above "'GURALP CMG-40T-30S'"
                    # matches 'GURALP CMG-40T-30S',
                    # whereas "GURALP CMG-40T-30S" matches "GURALP" or "CMG-40T-30S" but not the whole string. This is needed only with
                    # STRING VALUES WITH spaces. In any other case, provide only quotes around the whole expression

# set to True or False if station inventories should be saved when they need to be downloaded
# If missing (e.g., by deleting the line below), it defaults to False.
# Saving inventories might speed up further processing but increases db size
save_inventory: False


# custom parameters. You can define whatever you want here as needed in the processing python file
arrival_time_delay: 0
amp_ratio_threshold: 0.8
bandpass_freq_max: 20  # the max frequency, in Hz
bandpass_max_nyquist_ratio: 0.9  # the amount of freq_max to be taken. low-pass corner = max_nyquist_ratio * freq_max (defined above)
bandpass_corners: 2  # the corners
# the window length (in seconds). There will be two spectra, one calculated on
# AT-window_length (noisy signal), the other on AT+window_length ('normal' signal):
snr_window_length: 60  # snr_fixedwindow_in_sec
remove_response_water_level: 60
remove_response_output: 'ACC'  # or 'VEL', 'DISP'
taper_max_percentage: 0.05  # the taper percentage used when tapering (applied on any tapered object)
freqs_interp:
 - 0.1
 - 0.106365
 - 0.113136
 - 0.120337
 - 0.127997
 - 0.136145
 - 0.144811
 - 0.154028
 - 0.163833
 - 0.174261
 - 0.185354
 - 0.197152
 - 0.209701
 - 0.22305
 - 0.237248
 - 0.252349
 - 0.268412
 - 0.285497
 - 0.30367
 - 0.323
 - 0.34356
 - 0.365429
 - 0.388689
 - 0.413431
 - 0.439747
 - 0.467739
 - 0.497512
 - 0.52918
 - 0.562864
 - 0.598692
 - 0.636801
 - 0.677336
 - 0.72045
 - 0.766309
 - 0.815088
 - 0.866971
 - 0.922156
 - 0.980855
 - 1.04329
 - 1.1097
 - 1.18033
 - 1.25547
 - 1.33538
 - 1.42038
 - 1.5108
 - 1.60696
 - 1.70925
 - 1.81805
 - 1.93378
 - 2.05687
 - 2.18779
 - 2.32705
 - 2.47518
 - 2.63273
 - 2.80031
 - 2.97856
 - 3.16816
 - 3.36982
 - 3.58432
 - 3.81248
 - 4.05516
 - 4.31328
 - 4.58784
 - 4.87987
 - 5.19049
 - 5.52088
 - 5.8723
 - 6.24609
 - 6.64368
 - 7.06657
 - 7.51638
 - 7.99483
 - 8.50372
 - 9.04501
 - 9.62076
 - 10.2332
 - 10.8845
 - 11.5774
 - 12.3143
 - 13.0982
 - 13.9319
 - 14.8187
 - 15.762
 - 16.7653
 - 17.8324
 - 18.9675
 - 20.1749
 - 21.4591
 - 22.825
 - 24.2779
 - 25.8233
 - 27.467
 - 29.2154
 - 31.075
 - 33.0531
 - 35.157
 - 37.3949
 - 39.7752
 - 42.307
 - 45.